package alphonsoTree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

class BinaryTree {
    Node root;
 
    // Encodes a tree to a single string.
    public static String serialize(Node root)
    {
        if (root == null) {
            return null;
        }
        Stack<Node> s = new Stack<>();
        s.push(root);
 
        List<String> l = new ArrayList<>();
        while (!s.isEmpty()) {
            Node t = s.pop();
 
            // If current node is NULL, store marker
            if (t == null) {
                l.add("#");
            }
            else {
 
                // Else, store current node
                // and recur for its children
                l.add("" + t.val);
                s.push(t.right);
                s.push(t.left);
            }
        }
        return String.join(",", l);
    }
 
    static int t;
 
    // Decodes your encoded data to tree.
    public static Node deserialize(String data)
    {
        if (data == null)
            return null;
        t = 0;
        String[] arr = data.split(",");
        return helper(arr);
    }
 
    public static Node helper(String[] arr)
    {
        if (arr[t].equals("#"))
            return null;
 
        // Create node with this item
        // and recur for children
        Node root
            = new Node(Integer.parseInt(arr[t]));
        t++;
        root.left = helper(arr);
        t++;
        root.right = helper(arr);
        return root;
    }
 
 	
	public static void print(Node node) {
		
		if(node == null) {
			System.out.println("This tree is empty");
			return;
		}
		Queue<Node> queue = new LinkedList<>();
		
		queue.offer(node);
		
		while(!queue.isEmpty()) {
			int levelSize = queue.size();
			int hl = levelSize/2;
			for( int i = 0; i < levelSize; i++) {
				Node curr = queue.poll();
				
				if(curr !=null) {
					if(i==hl) {
						System.out.println(curr.ch+" ");
					}else {
						System.out.println("  ");
					}
					queue.offer(curr.left);
					queue.offer(curr.right);
				}else {
					System.out.println("  ");
					queue.offer(null);
					queue.offer(null);
				}
				
			}
		}
		System.out.println();
		
	}

}
