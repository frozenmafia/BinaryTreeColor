package alphonsoTree;

public class Printer {
	
	public static int height(Node node) {
		if(node == null) {
			return 0;
		}
		
		return Math.max(height(node.left), height(node.right))+1;
	}
	
	public static int getCol(int h) {
		if(h == 1) {
			return 1;
		}
		
		return getCol(h-1)+getCol(h-1)+1;
	}
	
	public static void printTree(int[][] M, Node root, int col, int row, int height) {
		if(root == null) {
			return;
		}
		
		M[row][col] = root.val;
		
		 printTree(M, root.left, col - (int)Math.pow(2, height - 2), row + 1, height - 1);
	        printTree(M, root.right, col + (int)Math.pow(2, height - 2), row + 1, height - 1);

	}
	
	 public static void TreePrinter(BinaryTree tree) {
	        int h = height(tree.root);
	        int col = getCol(h);
	        int[][] M = new int[h][col];
	        printTree(M, tree.root, col / 2, 0, h);
	        for (int i = 0; i < h; i++) {
	            for (int j = 0; j < col; j++) {
	                if (M[i][j] == 0)
	                    System.out.print("  ");
	                else
	                    System.out.print(M[i][j] + " ");
	            }
	            System.out.println();
	        }
	    }

}
